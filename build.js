var fs = require("fs");
var path = require("path");
var cp = require("child_process");

var Const = require("./const");
var pkg = require("./package.json");

var generated = path.join(__dirname, "include", "generated.h");
var cont = "/** ttyutil - generated.h - generated headers\n" +
           " * https://github.com/clidejs/ttyutil\n" +
           " *\n" +
           " * Copyright Bernhard BÃ¼cherl <bernhard.buecherl@gmail.com>\n" +
           " *\n" +
           " * do not change, this file is autogenerated by 'node build',\n" +
           " * these constants are set in ./const.js\n" +
           " * Build: " + pkg.version + "." + Date.now() + "\n" +
           " */\n" +
           "#ifndef INCLUDE_GENERATED_H_\n" +
           "#define INCLUDE_GENERATED_H_\n" +
           "\n";
var REBUILD = process.env.REBUILD || false;
var OS = process.env.OS;

for(var name in Const) {
  for(var sub in Const[name]) {
    cont += "#define " + name.toUpperCase() + "_" + sub.toUpperCase() +
        " " + toCpp(Const[name][sub]) + "\n";
  }
  cont += "\n";
}

cont += "#endif  // INCLUDE_GENERATED_H_\n";

function toCpp(v) {
  if(typeof v === "string") {
    return "NanNew<v8::String>(\"" + v + "\")";
  } else {
    return v;
  }
}

console.log("    [preinstall]", process.env);
console.log("    [preinstall] write constants to 'generated.h'");
fs.writeFile(generated, cont, function(err) {
  if(err) throw err;
  if((!fs.existsSync(path.join(__dirname, "deps", "ncurses", "lib",
      "libncurses++.a")) || REBUILD) && process.platform !== "win32") {
    console.log("    [preinstall] ncurses './configure'");
    var cfg = cp.spawn("./configure", {
      cwd: path.join(__dirname, "deps", "ncurses")
    });
    cfg.stdout.pipe(process.stdout);
    cfg.stderr.pipe(process.stderr);
    cfg.on("exit", function(code) {
      if(code !== 0) throw "ncurses ./configure exited with code -" + code;
      console.log("    [preinstall] ncurses 'make'");
      var make = cp.spawn("make", {
        cwd: path.join(__dirname, "deps", "ncurses")
      });
      make.stdout.pipe(process.stdout);
      make.stderr.pipe(process.stderr);
      make.on("exit", function(code ) {
        if(code !== 0) throw "ncurses make exited with code -" + code;
        console.log("    [preinstall] finished with code -0");
      });
    });
  }
});
