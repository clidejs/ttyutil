var fs = require("fs");
var path = require("path");
var cp = require("child_process");

var Const = require("../lib/const");
var pkg = require("../package.json");

var generated = path.join(__dirname, "..", "include", "generated.h");
var cont = "/** ttyutil - generated.h - generated header\n" +
           " * https://github.com/clidejs/ttyutil\n" +
           " *\n" +
           " * Copyright Bernhard BÃ¼cherl <bernhard.buecherl@gmail.com>\n" +
           " *\n" +
           " * do not change this file,\n" +
           " * it is autogenerated by 'npm install',\n" +
           " * these constants are set in /const.js\n" +
           " */\n" +
           "#ifndef INCLUDE_GENERATED_H_\n" +
           "#define INCLUDE_GENERATED_H_\n" +
           "\n";
var TTYU_NCURSES_REBUILD = process.env.TTYU_NCURSES_REBUILD || false;
var TTYU_BUILD_DEBUG = process.env.TTYU_BUILD_DEBUG || false;
var TTYU_CODE_DEBUG = process.env.TTYU_CODE_DEBUG || false;

for(var name in Const) {
  for(var sub in Const[name]) {
    cont += "#define " + name.toUpperCase() + "_" + sub.toUpperCase() +
        " " + toCpp(Const[name][sub]) + "\n";
  }
  cont += "\n";
}
if(TTYU_CODE_DEBUG) {
  cont += "#define CDEBUG\n";
  if(TTYU_CODE_DEBUG === "file") {
    cont += "#define CDEBUG_FILE\n";
  }
  cont += "\n";
}
cont += "#endif  // INCLUDE_GENERATED_H_\n";

function toCpp(v) {
  if(typeof v === "string") {
    return "NanNew<v8::String>(\"" + v + "\")";
  } else {
    return v;
  }
}

console.log("    [preinstall] ENV: [ TTYU_NCURSES_REBUILD='" +
    TTYU_NCURSES_REBUILD + "', TTYU_BUILD_DEBUG='" + TTYU_BUILD_DEBUG +
    "', TTYU_CODE_DEBUG='" + TTYU_CODE_DEBUG + "' ]");
console.log("    [preinstall] write constants to 'generated.h'");
fs.writeFile(generated, cont, function(err) {
  if(err) throw err;
  if((!fs.existsSync(path.join(__dirname, "..", "deps", "ncurses", "lib",
      "libncurses++.a")) || TTYU_NCURSES_REBUILD) &&
      process.platform !== "win32") {
    console.log("    [preinstall] ncurses './configure'");
    var cfg = cp.spawn("./configure", ["--with-shared", "--enable-pc-files",
        "--enable-widec", "--without-normal"], {
      cwd: path.join(__dirname, "..", "deps", "ncurses")
    });
    if(TTYU_BUILD_DEBUG) {
      cfg.stdout.pipe(process.stdout);
      cfg.stderr.pipe(process.stderr);
    }
    cfg.on("exit", function(code) {
      if(code !== 0) throw "ncurses './configure' exited with code -" + code;
      console.log("    [preinstall] ncurses 'make'");
      var make = cp.spawn("make", {
        cwd: path.join(__dirname, "..", "deps", "ncurses")
      });
      if(TTYU_BUILD_DEBUG) {
        make.stdout.pipe(process.stdout);
        make.stderr.pipe(process.stderr);
      }
      make.on("exit", function(code) {
        if(code !== 0) throw "ncurses 'make' exited with code -" + code;
        console.log("    [preinstall] finished with code -0");
      });
    });
  } else {
    console.log("    [preinstall] finished with code -0");
  }
});
